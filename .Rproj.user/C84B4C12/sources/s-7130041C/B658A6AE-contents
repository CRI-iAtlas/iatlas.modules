
drilldown_scatterplot_server <- function(
  id,
  data,
  eventdata
) {
  shiny::moduleServer(
    id,
    function(input, output, session) {

      ns <- session$ns

      selected_group <- shiny::reactive({
        shiny::req(eventdata())
        eventdata()$x[[1]]
      })

      scatterplot_data <- shiny::reactive({
        shiny::req(data(), selected_group())
        data() %>%
          dplyr::filter(.data$x == selected_group()) %>%
          dplyr::select("sample", "color", "y") %>%
          tidyr::pivot_wider(., values_from = "y", names_from = "color")
      })

      output$x_feature_selection_ui <- shiny::renderUI({
        shiny::req(scatterplot_data())
        choices <- colnames(scatterplot_data())[-1]
        shiny::req(length(choices) > 1)
        shiny::selectInput(
          inputId  = ns("x_feature_choice"),
          label    = "Select X Feature",
          choices  = choices
        )
      })

      output$y_feature_selection_ui <- shiny::renderUI({
        shiny::req(scatterplot_data())
        choices <- colnames(scatterplot_data())[-1]
        shiny::req(length(choices) > 1)
        shiny::selectInput(
          inputId  = ns("y_feature_choice"),
          label    = "Select Y Feature",
          choices  = choices
        )
      })

      formatted_scatterplot_data <- shiny::reactive({
        shiny::req(
          input$x_feature_choice, input$y_feature_choice, selected_group()
        )
        scatterplot_data() %>%
          dplyr::select(
            "sample",
            "x" = input$x_feature_choice,
            "y" = input$y_feature_choice
          ) %>%
          tidyr::drop_na() %>%
          dplyr::mutate("group" = selected_group()) %>%
          create_plotly_label(
            .data$sample, .data$group, c("x", "y"), "Sample"
          ) %>%
          dplyr::select("x", "y", "text" = "label")
      })

      output$scatterplot <- plotly::renderPlotly({
        plotly_scatter(
          formatted_scatterplot_data(),
          text_col = "text",
          xlab = input$x_feature_choice,
          ylab = input$y_feature_choice,
          title = selected_group(),
          identity_line = TRUE
        )
      })

      plotly_server(
        "scatterplot",
        plot_data = formatted_scatterplot_data
      )

    }
  )
}
