test_that("barplot_server_starwars", {
  starwars_data <- shiny::reactive({
    dplyr::select(
      dplyr::starwars,
      "sample" = "name",
      "x" = "species",
      "color" = "gender",
      "y" = "height"
    )
  })

  starwars_group_data <- shiny::reactive({
    starwars_data() %>%
      dplyr::select("group" = "x") %>%
      dplyr::distinct() %>%
      dplyr::mutate("description" = stringr::str_c("Species: ", .data$group))
  })

  shiny::testServer(
    barplot_server,
    args = list(
      "plot_data" = starwars_data, "group_data" = starwars_group_data
    ),
    {
      expect_equal(barplot_source_name(), "proxy1-barplot")
      expect_type(output$barplot, "character")
      expect_error(
        barplot_eventdata(),
        regexp = "Click on above barplot.",
        class = c("shiny.silent.error")
      )
      expect_named(
        summarized_barplot_data(),
        c("x", "color", "text", "MEAN", "SE")
      )
    }
  )
})

test_that("barplot_server_iris", {

  iris_data <- shiny::reactive({
    iris %>%
      dplyr::as_tibble() %>%
      dplyr::mutate("sample" = as.character(1:dplyr::n())) %>%
      tidyr::pivot_longer(!c("Species", "sample"), names_to = "color", values_to = "y") %>%
      dplyr::rename("x" = "Species")
  })

  iris_group_data <- shiny::reactive({
    iris_data() %>%
      dplyr::select("group" = "x") %>%
      dplyr::distinct() %>%
      dplyr::mutate("description" = stringr::str_c("Species: ", .data$group))
  })

  iris_feature_data <- shiny::reactive({
    dplyr::tribble(
      ~group,   ~feature,
      "Length", "Sepal.Length",
      "Width",  "Sepal.Width",
      "Length", "Petal.Length",
      "Width",  "Petal.Width"
    )
  })

  shiny::testServer(
    barplot_server,
    args = list(
      "plot_data" = iris_data,
      "group_data" = iris_group_data,
      "feature_data" = iris_feature_data,
      "drilldown" = shiny::reactive(T)
    ),
    {
      expect_type(output$feature_group_selection_ui, "list")
      session$setInputs("feature_group_choice" = "Length")
      expect_equal(barplot_features(), c("Sepal.Length", "Petal.Length"))
      expect_type(barplot_data(), "list")
      expect_equal(barplot_source_name(), "proxy1-barplot")
      expect_type(output$barplot, "character")
      expect_error(
        barplot_eventdata(),
        regexp = "Click on above barplot.",
        class = c("shiny.silent.error")
      )
    }
  )
})
